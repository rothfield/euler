(ns euler.problem-4-largest-palindrome-product)

(comment
  (def s "90109")
  (def mid 2)
  (is-palindrome 99))
;;
(defn is-palindrome [x]
  (let [s (str x)
        mid (int (/ (count s) 2))]
    (every? true? (map = (take mid s) (take mid (reverse s))))))

(defn zpairs-of-3-digit-numbers []
  (for [e1 (range 1 99)
        e2 (range 1 99)]
    (list e1 e2)))

;; (count (pairs-of-3-digit-numbers))
(defn pairs-of-3-digit-numbers []
  (for [e1 (range 499 0 -1)
        e2 (range 500 999)]
    (list e1 e2)))

;; (println (* 999 999)) => 998001
;; (int (/ 998001 100)) 


(def three-digit-number? (into (sorted-set) (range 100 1000)))
;; (inc (three-digit-number? 999))
;;(def x (* 999 999))
;;(def a 100)
(defn decompose-into-two-3-digit-factors [x]
  (loop [a 999]
    ;(println "in loop, a=" a)
    ;(println "in loop, x=" x)
    (cond 
      (= 99 a)
      nil 
      (and (zero? (mod x a))
           (get three-digit-number? (/ x a)))
      [a (/ x a)]
      true
      (recur (dec a)))))

(comment
 (some #(if (and (not (nil? %))
            (is-palindrome (apply * %))) 
          (conj % (apply * %))) (map decompose-into-two-3-digit-factors (range (* 999 999) (int (/ (* 999 999) 2)) -1))))

;; (some #(if (and (not (nil? %))
 ;;           (is-palindrome (apply * %))) 
  ;;        (conj % (apply * %))) (map 
                                  
   (some #(do (println "examining " %)
              (if (and (decompose-into-two-3-digit-factors %)
               (is-palindrome %))
            %))
               (range (* 999 999) (int (/ (* 999 999) 2)) -1))


;; 
;;; (println (decompose-into-two-3-digit-factors 906609))
;;; (println (decompose-into-two-3-digit-factors (* 999 999)))
;; (println three-digit-number?)
;;; (println (into #{} (range 100 999)))
;;; (get three-digit-number? 999)
;;; (println (get #{1 2 3} 1))
;;;(println x)
;;; (def x (* 999 999))
(defn largest-palindrome-product2 []
  (let [three-digit-numbers (set (range 100 999))]))

;;(println (count (pairs-of-3-digit-numbers)))
(defn largest-palindrome-product []
  "Largest palindrome product
Problem 4
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

Find the largest palindrome made from the product of two 3-digit numbers.
  (is-palindrome 29922)
"
  (apply max (filter is-palindrome (map (partial apply *) (pairs-of-3-digit-numbers)))))

;; (println (largest-palindrome-product))
;;; (println (take 100 (pairs-of-3-digit-numbers)))

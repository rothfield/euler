(ns euler.problem-12-highly-divisible-triangular-number)
;;; 500 divisors
;;; 500= 
;; 500 = 22 Ã— 53
;; (*' (exp 2 53)  (exp 3 22))
;;  282655456723167445807792128N

;; (integer? (Math/sqrt (+ 1 (* 8 28))))
; (def z  (Math/sqrt 100))

;; (problem-11)
(defn is-triangular?
  "So a number T is triangular if and only if 8T + 1 is an odd perfect 
square." 
  [x]
  (let [z (Math/sqrt (+ 1 (* 8 x)))]
    (not (> z (Math/floor z)))))
;; (is-triangular? 28)
;; (= (int 15.0) 15)
(comment
  (use 'clojure.stacktrace)     
  (print-stack-trace *e))
;; (def x 48)
(defn exp
  "Raise x to the power n"
  [x n]
  (reduce *' (repeat n x)))

(defn divisors-of-a-number [x]
  (reduce (fn [accum item]
            (println "item=" item " accum=" accum)
            (if (zero? (mod x item))
              (conj (conj accum item) (/ x item))
              accum))
          #{1} (range 2 (int (inc (Math/sqrt x))))))

;;; Show that n is a triangular number if and only if 8n+1 is a perfect square. ?
;; (count (divisors-of-a-number 48))
;; (/ 24 4)
;; (conj #{1} 4)
;; (mod 24 4)
(defn problem-11 []
  (let [z 282655456723167445807792128N]
    (some #(if (is-triangular? (+ z %))
             (+ z %))
          (range))))

(defn highly-divisible-triangular-number
  "Highly divisible triangular number
  Problem 12
  The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28
  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred divisors?"
  [number-of-divisors])
